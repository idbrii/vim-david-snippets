# Casts
snippet cast Static Cast
	static_cast<${1}>(${2})${3}
snippet cast Reinterpret Cast
	reinterpret_cast<${1}>(${2})${3}
snippet cast Dynamic Cast
	dynamic_cast<${1}>(${2})${3}
snippet cast Const Cast
	const_cast<${1}>(${2})${3}

# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}

# std::map
snippet map
	std::map<${1:key}, ${2:value}> ${3};

# std::vector
snippet vector
	std::vector<${1:char}> ${2};

# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* namespace $1 */

# Class
snippet class
	class ${1:`Filename('$1', 'name')`} 
	{
	public:
		$1(${2});
		${3:virtual }~$1();

	private:
		${4:/* data */}
	};

snippet for std::iterator for-each loop
	for (${1:vector<T>}::iterator i = ${2:items.}begin(); i != ${2}end(); ++i) ${3}

# auto iterator
snippet itera
	for (auto ${1:i} = $1.begin(); $1 != $1.end(); ++$1) {
		${2:std::cout << *$1 << std::endl;}
	}

# iterator
snippet iter
	for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {
		${6}
	}

# member function implementations
snippet mfun
	${4:void} ${1:`Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {
		${5:return};
	}
snippet scout
	std::cout << ${1} << std::endl;
snippet cout
	cout << ${1} << endl;
snippet scin
	std::cin >> ${1};
snippet cin
	cin >> ${1};
