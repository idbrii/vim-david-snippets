snippet if "If statement" b
if ${1:condition} then
	${VISUAL}
end
endsnippet

# I don't like the vim-snippets version of for because I want some consistency
# between languages. fori is for integer index loops. Define my own and they
# seem to clobber the vim-snippets ones.

snippet fore "table iteration loop - pair" b
for ${1:key},${2:val} in pairs(${3:table_name}) do
	$0
end
endsnippet

snippet for "array iteration loop - ipair" b
for ${1:i},${2:val} in ipairs(${3:table_name}) do
	$0
end
endsnippet

snippet fori "numeric iteration loop - range" b
for ${1:i}=${2:first},${3:last}${4/^..*/(?0:,:)/}${4:step} do
	$0
end
endsnippet

snippet print "Debug print" b
print("`!v g:snips_author`:", ${1:"$2"}$0)
endsnippet

snippet = "Assignment / increment / decrement" b
${1:${VISUAL:variable}} = $1 ${2:+} 
endsnippet

# Based on vim-snippets fun but adds classname.
# TODO(dbriscoe): If I can't find a class definition, can I omit the classname? (How?)
snippet !fun(ction)?! "New (member) function" br
function ${1:`!p
name = snip.basename.capitalize() or "classname"
class_re = re.compile("local (\w*) = Class")
for line in snip.buffer:
	match = class_re.match(line)
	if match:
		name = match.group(1)
		break
snip.rv = name
`:}${2:new_function}(${3:args})
	$0
end
endsnippet

snippet append "Append an entry to the table's array"
table.insert(${1:${VISUAL:table}}, ${2:entry})
endsnippet
