global !p
def _search_and_return_first_group_from_regex(regex):
	for line in snip.buffer:
		match = regex.match(line)
		if match:
			return match.group(1)
	return None


def get_lua_classname():
	# class.lua
	tablename = _search_and_return_first_group_from_regex(re.compile("local (\w*) = [cC]lass"))
	invoker = ':'
	if not tablename:
		# Table-scoped functions.
		tablename = _search_and_return_first_group_from_regex(re.compile("local ("+ snip.basename +") = ", re.IGNORECASE))
		invoker = '.'
	if not tablename:
		# No scope for functions -- dump in global namespace.
		tablename = ''
		invoker = ''
	return tablename, invoker

# Not shareable. Only exists to extract parsing from snippet.
def _fun_make_lua_parentcall(klass, t):
	if not klass:
		return ''
	args = t[2]
	if len(args) > 0:
		args = ', '+ args
	fn = "{klass}._base.{function}(self{args})".format(
		klass=klass,
		function=t[1],
		args=args)
	return snip.mkline(fn)
endglobal

snippet cv "Initialize a private member variable (in ctor)" b
self.$1 = ${1:var}
endsnippet

# Limit quote as snippet to specific scenarios (first nonblank or
# following equals) so it's not accidentially expanded within other
# snippets.
snippet " "multi-line string" b
[[ ${1:txt}
]]
endsnippet

snippet '=\s*\"' "multi-line string" r
= [[ ${1:txt}
]]
endsnippet

snippet /(else)?if/ "if statement" "vim.eval('@0')" bre
`!p snip.rv = match.group(0)` ${1:`!p
# use context to capture initial register value
snip.rv = snip.context.strip()`} then
	${VISUAL}$2
${3:end}$0
endsnippet

# I don't like the vim-snippets version of for because I want some consistency
# between languages. fori is for integer index loops. Define my own and they
# seem to clobber the vim-snippets ones.

snippet fore "table iteration loop - pair" b
for ${1:key},${2:val} in pairs(${3:table_name}) do
	${VISUAL}$0
end
endsnippet

snippet for "array iteration loop - ipair" b
for ${1:i},${2:val} in ipairs(${3:table_name}) do
	${VISUAL}$0
end
endsnippet

# Not including step because it's so uncommon that it's just annoying to
# delete. It's useful for showing that's how you do striding, but not useful
# enough for the annoyance.
snippet fori "numeric iteration loop - first,last,step" b
for ${1:i}=${2:1},${3:last} do
	${VISUAL}$0
end
endsnippet

snippet for2d "numeric iteration of 2d array - row first" b
for ${1:y}=${2:0},${3:last}-1 do
	for ${4:x}=${5:0},${6:last}-1 do
		${VISUAL}$0
	end
end
endsnippet

snippet log "Debug print" b
print("`!v g:snips_author`", ${1:"$2"}$3)
endsnippet

snippet dump "String format: dump out data" w
print("${1:${VISUAL:data}}`!p
text = t[1]
if text[-1] == '=':
	prev = text.rfind('"')
	if prev == -1:
		prev = 0
	else:
		prev += 1
	text += ' ", '+ text[prev:-1] +', "'
	t[1] = text
`")
endsnippet

#~ # TODO: Would be cleaner to just insert a list and it prepends the string part.
#~ snippet dump "String format: dump out data" w
#~ print(${1:${VISUAL:data}}`!p
#~ text = t[1]
#~ if text[-1] == ',':
#~ 	end = text.rfind(',')
#~ 	if end == -1:
#~ 		prev = ''
#~ 		end = 0
#~ 	else:
#~ 		prev = text[:end]
#~ 		end += 1
#~ 	#~ text = prev +'"{v} = ", {v}, '.format(v=text[end:-1])
#~ 	text = prev +'{v}, {v},'.format(v=text[end:-1])
#~ 	t[1] = text
#~ `)
#~ endsnippet

snippet = "Assignment / increment / decrement" b
${1:${VISUAL:variable}} = $1 ${2:+} ${3:1}
endsnippet

# Based on vim-snippets fun but adds classname.
# Note: Putting two snippets next to each other (1 and 2) somehow combines them
# when they're inserted later, so to get the base call line to work, we don't
# allow classname customization.
# TODO(dbriscoe): If I can't find a class definition, can I omit the classname? (How?)
snippet /(local )?fun/ "Named function" br!
`!p
func = 'function '
if match[1]:
	func = match[1] + func

klass, invoker = get_lua_classname()
snip.rv = func + klass + invoker
`${1:new_function}(${2:args})`!p
if not snip.c:
	snip.shift(1 + int(vim.eval('indent(".")/&shiftwidth')))
	line = _fun_make_lua_parentcall(klass, t)
	if line:
		line = "\n" + line
	snip.rv = line
`
	${3:${VISUAL}}$4
end
endsnippet

# Similar to vim-snippets, but requires preceeding punctuation that would imply
# it's anonymous. Still won't fire in nested args:
# {
#	fun<trigger>
# }
# But you should get above snippet instead.
snippet /([=(),!-[\]{};:'"<>./?@#$%^&*_~]\S*\s*)fun/ "Anonymous function" r
`!p snip.rv = match.group(1)
`function(${2:args})
	$0
end
endsnippet

# Using double quotes here because inclement uses double quotes.
snippet cl "Gabe class"
local class = require "gabe.class"
`!p
# Only import transform if we're going to use it.
if t[3]:
	snip.rv = 'local transform = require "system.transform"'
else:
	snip.rv = ''
`


local ${1:`!p snip.rv = snip.basename.capitalize()`} = class('`!p snip.rv = t[1].lower()`')

function $1:init(${2:x,y})
	${3:self.name = '`!p snip.rv = t[1].lower()`'
	self.transform = transform.create_component(x,y)}
	$4
end

return $1
endsnippet

# Quick insert pretty print for debugging, not committing.
snippet /pr(etty)?/ "pretty print something" br
local pretty = require "pl.pretty"
print("`!v g:snips_author` = ", "\n", pretty.write(${1:${VISUAL}}))
endsnippet

snippet inject "Inject code around an existing function" b
local old_$1 = ${2:object name}.${1:function name}
$2.$1 = function(${3:self}$4)
	old_$1($3$4)
	$5
end
endsnippet

snippet append "Append an entry to the table's array"
table.insert(${1:${VISUAL:table}}, ${2:entry})
endsnippet

snippet imgui "Start an imgui window" b
local dbui = require("dbui/imgui")
dbui.Begin("${1:window name}") do
	$2
end
dbui.End()
endsnippet

# Standard lua stack trace
snippet trace "Insert stack trace" b
print("`!v g:snips_author`", debug.traceback("breakpoint: ${1:msg}"))
endsnippet

snippet debugdraw "Add a child's imgui draw section" b
function ${1:`!p
klass, invoker = get_lua_classname()
snip.rv = klass
`}:DebugDraw_AddSection(dbui, panel)
	$1._base.DebugDraw_AddSection(self, dbui, panel)

local TheUI = nil -- Use this global for local hacks to avoid changing function signatures.
	TheUI = dbui

	dbui.Spacing()
	dbui.Text("$1")
	dbui.Indent() do
		$0
	end
	dbui.Unindent()
end
endsnippet

snippet debugdraw "Add the parent's setup and call from onupdate" b
-- global scope
local DebugPanel = require("dbui/debug_panel")
local panel = DebugPanel()

-- function scope
panel:StartFrame()
local dbui = require("dbui/imgui")
dbui.Begin("${1:`!p
klass, invoker = get_lua_classname()
snip.rv = klass
`}") do
	self.${2:widget}:DebugDraw_AddSection(dbui, panel)
end
dbui.End()
endsnippet

snippet uitext "Create a text widget" b
${1:local name} = ${2:${VISUAL:root}}:AddChild(Text(CHATFONT, 28, "${3:text}"))
endsnippet
