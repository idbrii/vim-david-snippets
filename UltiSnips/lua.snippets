global !p
import snip_lua

# Not shareable. Only exists to extract parsing from snippet.
def _fun_make_lua_parentcall(klass, t):
	if not klass:
		return ''
	args = t[2]
	if len(args) > 0:
		args = ', '+ args
	fn = "{klass}._base.{function}(self{args})".format(
		klass=klass,
		function=t[1],
		args=args)
	return snip.mkline(fn)
endglobal

snippet cv "Initialize a private member variable (in ctor)" b
self.$1 = ${1:var}
endsnippet

# Limit quote as snippet to specific scenarios (first nonblank or
# following equals) so it's not accidentially expanded within other
# snippets.
snippet " "multi-line string" b
[[ ${1:txt}
]]
endsnippet

snippet '=\s*\"' "multi-line string" r
= [[ ${1:txt}
]]
endsnippet

snippet /(else)?if/ "if statement" "vim.eval('@0')" bre
`!p snip.rv = match.group(0)` ${1:`!p
# use context to capture initial register value
snip.rv = snip.context.strip()`} then
	${VISUAL}$2
${3:end}$0
endsnippet

# I don't like the vim-snippets version of for because I want some consistency
# between languages. fori is for integer index loops. Define my own and they
# seem to clobber the vim-snippets ones.

snippet fore "table iteration loop - pair" b
for ${1:key},${2:val} in pairs(${3:table_name}) do
	${VISUAL}$0
end
endsnippet

snippet for "array iteration loop - ipair" b
for ${1:i},${2:val} in ipairs(${3:table_name}) do
	${VISUAL}$0
end
endsnippet

# Not including step because it's so uncommon that it's just annoying to
# delete. It's useful for showing that's how you do striding, but not useful
# enough for the annoyance.
snippet fori "numeric iteration loop - first,last,step" b
for ${1:i}=${2:1},${3:last} do
	${VISUAL}$0
end
endsnippet

snippet for2d "numeric iteration of 2d array - row first" b
for ${1:y}=${2:0},${3:last}-1 do
	for ${4:x}=${5:0},${6:last}-1 do
		${VISUAL}$0
	end
end
endsnippet

snippet forargs "forloop over ... varargs" b
for i=1,select('#', ...) do
	local val = select(i, ...)
	${VISUAL}$0
end
endsnippet

snippet log "Debug print" b
print("`!v g:snips_author`", ${1:"$2"}$3)
endsnippet

snippet dump "String format: dump out data" w
print("${1:${VISUAL:data}}`!p
text = t[1]
if text[-1] == '=':
	prev = text.rfind('"')
	if prev == -1:
		prev = 0
	else:
		prev += 1
	text += ' ", '+ text[prev:-1] +', "'
	t[1] = text
`")
endsnippet

# Capture ( to allow expansion inside printf(. I don't want inword expansion
# because that would mean dbgfmt would also expand.
snippet /(\()?fmt/ "String format: Format a string" r
`!p
if match.group(1):
	snip.rv = match.group(1)
else:
	snip.rv = ""
`("$1"):format($2)
endsnippet

#~ # TODO: Would be cleaner to just insert a list and it prepends the string part.
#~ snippet dump "String format: dump out data" w
#~ print(${1:${VISUAL:data}}`!p
#~ text = t[1]
#~ if text[-1] == ',':
#~ 	end = text.rfind(',')
#~ 	if end == -1:
#~ 		prev = ''
#~ 		end = 0
#~ 	else:
#~ 		prev = text[:end]
#~ 		end += 1
#~ 	#~ text = prev +'"{v} = ", {v}, '.format(v=text[end:-1])
#~ 	text = prev +'{v}, {v},'.format(v=text[end:-1])
#~ 	t[1] = text
#~ `)
#~ endsnippet

snippet = "Assignment / increment / decrement" b
${1:${VISUAL:variable}} = $1 ${2:+} ${3:1}
endsnippet

# Based on vim-snippets fun but adds classname.
# Note: Putting two snippets next to each other (1 and 2) somehow combines them
# when they're inserted later, so to get the base call line to work, we don't
# allow classname customization.
snippet /(local )?fun/ "Named function" br!
`!p
func = 'function '
if match[1]:
	func = match[1] + func
	klass = None
else:
	klass, invoker = snip_lua.get_lua_classname(snip.basename, snip.buffer, vim.current.window.cursor)
	func = func + klass + invoker
snip.rv = func
`${1:new_function}(${2:args})
	${3:${VISUAL}}$4
end
endsnippet

# Moved out of fun snippet because I rarely want this super call.
# TODO: Would be better as a snippet that didn't create the function and just
# looked up to find the function name and args.
snippet super "Overridden function (calls super class)" b
`!p
func = 'function '
klass, invoker = snip_lua.get_lua_classname(snip.basename, snip.buffer, vim.current.window.cursor)
func = func + klass + invoker
snip.rv = func
`${1:new_function}(${2:args})
	`!p
line = _fun_make_lua_parentcall(klass, t)
snip.rv = line
`
	${3:${VISUAL}}$4
end
endsnippet

# Similar to vim-snippets, but requires preceeding punctuation that would imply
# it's anonymous. Still won't fire in nested args:
# {
#	fun<trigger>
# }
# But you should get above snippet instead.
snippet /([=(),!-[\]{};:'"<>./?@#$%^&*_~]\S*\s*)fun/ "Anonymous function" r
`!p snip.rv = match.group(1)
`function(${1:args})
	$2
end
endsnippet

# Using double quotes here because inclement uses double quotes.
snippet cl "Gabe class"
local class = require "gabe.class"
`!p
# Only import transform if we're going to use it.
if t[3]:
	snip.rv = 'local transform = require "system.transform"'
else:
	snip.rv = ''
`


local ${1:`!p snip.rv = snip.basename.capitalize()`} = class('`!p snip.rv = t[1].lower()`')

function $1:init(${2:x,y})
	${3:self.name = '`!p snip.rv = t[1].lower()`'
	self.transform = transform.create_component(x,y)}
	$4
end

return $1
endsnippet

# Quick insert pretty print for debugging, not committing.
# Starts with what looks like assignment to make output valid lua.
snippet /pr(etty)?/ "pretty print something" br
local pretty = require "inspect"
print("HACK =", pretty(${1:${VISUAL}}, { depth = 5, }))
endsnippet

snippet inject "Inject code around an existing function" b
local old_$1 = ${2:object name}.${1:function name}
$2.$1 = function(${3:self}$4)
	old_$1($3$4)
	$5
end
endsnippet

snippet append "Append an entry to the table's array"
table.insert(${1:${VISUAL:table}}, ${2:entry})
endsnippet

# Standard lua stack trace
snippet trace "Insert stack trace" b
print("`!v g:snips_author`", debug.traceback("breakpoint: ${1:msg}"))
endsnippet

