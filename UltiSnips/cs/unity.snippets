global !p
from snip_cs import *
endglobal


snippet var "Unity: Tunable variable with tooltip" b
[Tooltip("${3:description}")]
public ${1:type} ${2:name};
$0
endsnippet

snippet pub "Unity: Public but not editor-visible variable." b
[HideInInspector]
public ${1:type} ${2:name};
$0
endsnippet

snippet priv "Unity: Private but editor-visible variable." b
[Tooltip("${3:description}")]
[SerializeField] // show in editor
private ${1:type} ${2:name};
$0
endsnippet

snippet startawake "Unity: Awake and Start functions with description" b
void Awake() {
	// Init variables here
}
void Start() {
	// First update happens here
}
endsnippet

snippet collision "Unity: Collision response for hitting something" b
void OnCollision${1:Enter/Stay/Exit}${2:2D}(Collision$2 ${3:hit})
{
	$3.gameObject$4;
}
endsnippet

snippet trigger "Unity: Collision response for overlapping with something" b
void OnTrigger${1:Enter/Stay/Exit}${2:2D}(Collider$2 ${3:instigator})
{
	$3.gameObject$4;
}
endsnippet

# Second line must be moved to Start().
snippet comp "Unity: Cached component" b
private ${1:type} ${2:name};
$2 = GetComponent<$1>();$0
endsnippet

snippet forchild "Unity: iterate over child transforms" b
for (int ${1:i} = 0; $1 < ${2:transform}.childCount; ++$1)
{
	var t = $2.GetChild(i);
	${VISUAL}$0
}
endsnippet

snippet log "Unity: Debug log message" b
Debug.Log(${1:string.Format("$2{0} {1}", $3)}`!p
if has_access_to_unityobject():
	snip.rv = ', this'
`);$0
endsnippet

snippet err "Unity: Debug error message" b
Debug.LogError(${1:msg}`!p
if has_access_to_unityobject():
	snip.rv = ', this'
`);$0
endsnippet

# Requires my Dbg debugging "library".
snippet assert "Unity: My assert" b
Dbg.Assert(${1:predicate}, ${2:msg});$0
endsnippet

snippet stack "Unity: Print a stack trace" b
Debug.LogError("`!v g:snips_author` ${1:}", ${2:null});$0
endsnippet

snippet inheader "Unity: Header section for inspector" b
[Header("${1:heading}")]
endsnippet

snippet inspace "Unity: Spacer section for inspector" b
[Space(${1:10})]
endsnippet

snippet debugdraw "Unity: Debug draw to MonoBehaviour" b
using UnityEditor;
void OnGUI()
{
	GUILayout.BeginVertical();
	{
		GUILayout.Label(string.Format(${1:"x={0} y={1}", x, y}$0));
	}
	GUILayout.EndVertical();
}
endsnippet

snippet libdebug "Unity: Add some debug draw functions" b
void DrawArrow(Vector3 start, Vector3 delta, Color arrow_color, float duration, bool do_depth_test)
{
	Debug.DrawRay(start, delta, arrow_color, duration, do_depth_test);
	// Not really an arrowhead, but close enough.
	DrawPoint(start + delta, arrow_color, duration, do_depth_test);
}

void DrawPoint(Vector3 position, Color point_color, float duration, bool do_depth_test)
{
	// TODO: Could be more done with two lines.
	Debug.DrawRay(position, 0.1f * Vector3.up,    point_color, duration, do_depth_test);
	Debug.DrawRay(position, 0.1f * Vector3.down,  point_color, duration, do_depth_test);
	Debug.DrawRay(position, 0.1f * Vector3.left,  point_color, duration, do_depth_test);
	Debug.DrawRay(position, 0.1f * Vector3.right, point_color, duration, do_depth_test);
}
endsnippet

snippet menu "Unity: MenuItem" b
[UnityEditor.MenuItem("GameObject/$1")]
static void Menu_${1:Action}()
{
	$0
}
endsnippet

#
# Skeletons
#

snippet skel "Unity: New MonoBehaviour" b
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System;
using UnityEngine;

using Object = UnityEngine.Object;

public class ${1:`!p snip.rv = snip.basename`} : MonoBehaviour
{
$0
}
endsnippet

snippet skel "Unity: New ScriptableObject" b
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System;
using UnityEngine;

using Object = UnityEngine.Object;

[CreateAssetMenu(fileName = "$1", menuName = "`!p
# where it appears in the right click menu. Use company name as a folder to
# group our stuff away from built-in.
snip.rv = "{group}/{cmd}".format(
	group = vim.vars['snips_company'].decode("utf-8"),
	cmd = t[1])
`", order = 1)]
public class ${1:`!p snip.rv = snip.basename`} : ScriptableObject
{
	void Awake()
	{
	}
$0
}
endsnippet

snippet skel "Unity: New EditorWindow" b
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System;
using UnityEditor.SceneManagement;
using UnityEditor;
using UnityEngine;

using Object = UnityEngine.Object;

public class ${1:`!p snip.rv = snip.basename`} : EditorWindow
{
	[MenuItem("${2:Tools/$1}")]
	static void ShowToolbar()
	{
		EditorWindow.GetWindow<$1>("$1");
	}


	private Vector2 scroll;
	public void OnGUI()
	{
		scroll = EditorGUILayout.BeginScrollView(scroll);
		{
			${3:content}
		}
		EditorGUILayout.EndScrollView();
	}

}
endsnippet

snippet skel "Unity: New CustomEditor" b
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System;
using UnityEditor;
using UnityEngine;

namespace ${1:Editors}
{
	[CustomEditor(typeof(${2:`!p
suffix = "_Editor"
name = t[1]
if name.endswith(suffix):
	snip.rv = name[0:-len(suffix)]
else:
	snip.rv = name
`}), editorForChildClasses: true)]
	class ${1:`!p snip.rv = snip.basename`} : Editor
	{

		public override void OnInspectorGUI()
		{
			base.OnInspectorGUI();

			var ${3:`!p snip.rv = t[2].lower()`} = target as $2;

			GUILayout.BeginHorizontal();
			{
				if (GUILayout.Button(new GUIContent(
								"Do Action",
								"Tooltip for action")))
				{
					${4:$3.Action();}
				}
			}
			GUILayout.EndHorizontal();
		}

	}
}
endsnippet

snippet skel "Unity: New PropertyAttribute" b
using UnityEngine;

#if UNITY_EDITOR
using UnityEditor;
#endif

// This class should *not* live in Editor unless it can only decorate Editor classes!
namespace Game.Inspector
{

	// Defines an attribute that ${2}
	// Use like this:
	//      [$1`!p
if t[2]:
	if t[3] == 'string':
		snip.rv = '("{content}")'.format(content=t[4])
	else:
		snip.rv = '(5)'
else:
	snip.rv = ''
`] public Quaternion m_MinRotation;

	public class ${1:`!p snip.rv = snip.basename`}Attribute : PropertyAttribute {
		${2:public ${3:string} ${4:InputToAttribute};
		public $1Attribute($3 $4)
		{
			this.$4 = $4;
		}}
	}

#if UNITY_EDITOR
	[CustomPropertyDrawer(typeof($1Attribute))]
	public class $1Drawer : PropertyDrawer {
		public override float GetPropertyHeight(SerializedProperty property, GUIContent label) {
			return EditorGUIUtility.singleLineHeight * (EditorGUIUtility.wideMode ? 1f : 2f);
		}

		public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
			`!p
if t[2]:
	snip.rv = 'var {var_name} = attribute as {type_name}Attribute;'.format(type_name=t[1], var_name=t[1].lower())
else:
	snip.rv = ''
`
			// Pull data from your decorated property.
			Vector3 euler = property.quaternionValue.eulerAngles;
			EditorGUI.BeginProperty(position, label, property);
			{
				EditorGUI.BeginChangeCheck();
				// Define fields you want to expose.
				euler = EditorGUI.Vector3Field(position, label, euler);
				if (EditorGUI.EndChangeCheck())
				{
					// Apply data back to decorated property.
					property.quaternionValue = Quaternion.Euler(euler);
				}
			}
			EditorGUI.EndProperty();
		}
	}
#endif

}
endsnippet
