snippet var "Unity: Tunable variable with tooltip" b
[Tooltip("${3:description}")]
public ${1:type} ${2:name};
$0
endsnippet

snippet pub "Unity: Public but not editor-visible variable." b
[HideInInspector]
public ${1:type} ${2:name};
$0
endsnippet

snippet priv "Unity: Private but editor-visible variable." b
[Tooltip("${3:description}")]
[SerializeField] // show in editor
private ${1:type} ${2:name};
$0
endsnippet

snippet startawake "Awake and Start functions with description" b
void Awake() {
    // Init variables here
}
void Start() {
    // First update happens here
}
endsnippet

snippet collision "Collision response for hitting something" b
void OnCollision${1:Enter/Stay/Exit}${2:2D}(Collision$2 ${3:victim})
{
    $3.gameObject$4;
}
endsnippet

snippet trigger "Collision response for overlapping with something" b
void OnTrigger${1:Enter/Stay/Exit}${2:2D}(Collider$2 ${3:victim})
{
    $3.gameObject$4;
}
endsnippet

# Second line must be moved to Start().
snippet comp "Unity: Cached component" b
private ${1:type} ${2:name};
$2 = GetComponent<$1>();$0
endsnippet

snippet log "Unity: Debug log message" b
Debug.Log(${1:string.Format("{0} {1}$2", $3)}, ${4:this});$0
endsnippet

snippet err "Unity: Debug error message" b
Debug.LogError(${1:msg}, ${2:this});$0
endsnippet

# Requires my Dbg debugging "library".
snippet assert "Unity: My assert" b
Dbg.Assert(${1:predicate}, ${2:msg});$0
endsnippet

snippet stack "Print a stack trace" b
Debug.LogError("`!v g:snips_author` ${1:}", ${2:null});$0
endsnippet

snippet inheader "Header section for inspector" b
[Header("${1:heading}")]
endsnippet

snippet inspace "Spacer section for inspector" b
[Space(${1:10})]
endsnippet

snippet debugdraw "Debug draw to MonoBehaviour" b
using UnityEditor;
void OnGUI()
{
	GUILayout.BeginVertical();
	{
		GUILayout.Label(string.Format(${1:"x={0} y={1}", x, y}$0));
	}
	GUILayout.EndVertical();
}
endsnippet

snippet libdebug "Add some debug draw functions" b
void DrawArrow(Vector3 start, Vector3 delta, Color arrow_color, float duration, bool do_depth_test)
{
	Debug.DrawRay(start, delta, arrow_color, duration, do_depth_test);
	// Not really an arrowhead, but close enough.
	DrawPoint(start + delta, arrow_color, duration, do_depth_test);
}

void DrawPoint(Vector3 position, Color point_color, float duration, bool do_depth_test)
{
	// TODO: Could be more done with two lines.
	Debug.DrawRay(position, 0.1f * Vector3.up,    point_color, duration, do_depth_test);
	Debug.DrawRay(position, 0.1f * Vector3.down,  point_color, duration, do_depth_test);
	Debug.DrawRay(position, 0.1f * Vector3.left,  point_color, duration, do_depth_test);
	Debug.DrawRay(position, 0.1f * Vector3.right, point_color, duration, do_depth_test);
}
endsnippet

#
# Skeletons
#

snippet skel "Unity: New MonoBehavior" b
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using UnityEngine;

public class ${1:`!p snip.rv = snip.basename`} : MonoBehaviour
{
$0
}
endsnippet

snippet skel "Unity: New EditorWindow" b
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using UnityEditor.SceneManagement;
using UnityEditor;
using UnityEngine;

public class ${1:`!p snip.rv = snip.basename`} : EditorWindow
{
	[MenuItem("${Tools/$1}")]
	static void ShowToolbar()
	{
		EditorWindow.GetWindow(typeof($1));
	}

	void OnEnable()
	{
		titleContent = new GUIContent("$1");
	}


	private Vector2 scroll;
	public void OnGUI()
	{
		scroll = EditorGUILayout.BeginScrollView(scroll);
		{
			${2:content}
		}
		EditorGUILayout.EndScrollView();
	}

}
endsnippet

