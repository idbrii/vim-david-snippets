
# Remove unused snippets from vim-snippets that conflict with common words
# (causes nested snippet insertion).
clearsnippets sim
# Remove unused and unintuitive snippets from vim-snippets.
clearsnippets svm da cw cwp

snippet new "Construction of an object" b
${1:Type} ${2:variable} = new $1(${3:args});
endsnippet

snippet append "Append an entry to a List" b
${1:${VISUAL:destination}}.Add(${2:entry});
endsnippet

snippet append "Merge a list into another List" b
${1:${VISUAL:destination}}.AddRange(${2:source});
endsnippet

# As you type comma-separated parameters on the right, {n} values appear in the
# format string.
snippet fmt "String format" w
string.Format("${2:`!p
snip.rv = ' '.join(['{' + str(i) + '}' for i in range(t[1].count(','))])
`}"${1:, ${VISUAL:data}})
endsnippet

# As you type comma-separated parameters on the right, val={n} values appear in
# the format string.
snippet dump "String format: dump out data" w
string.Format("${2:`!p
snip.rv = ' '.join([k.strip() +'={' + str(i) + '}' for i,k in enumerate(t[1].split(',')[1:])])
`}"${1:, ${VISUAL:data}})
endsnippet

snippet using "Common usings" b
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System;
endsnippet

# I don't like postincrement.
snippet for "for loop" b
for (int ${1:i} = 0; $1 < ${2:10}; ++$1)
{
	${VISUAL}$0
}
endsnippet
snippet forr "for loop (reverse)" b
for (int ${1:i} = ${2:10}; $1 >= 0; --$1)
{
	${VISUAL}$0
}
endsnippet

snippet fore "foreach loop" b
foreach (${3:var} ${2:entry} in ${1:items})
{
	${VISUAL}$0
}
endsnippet

snippet ifdef "ifdef"
#if ${1:SYMBOL}
	${2:${VISUAL:#define }}$0
#endif
endsnippet

