global !p
import snip_c as c
import snip_common as common
endglobal

# Remove unused snippets from vim-snippets that conflict with common words
# (causes nested snippet insertion).
clearsnippets sim
# Remove unused and unintuitive snippets from vim-snippets.
clearsnippets svm da cw cwp mth
# Remove snippets where I have my own implementation.
clearsnippets prop propfull propg

snippet debugname "A class attribute to rename type in debugger watch window" b
[System.Diagnostics.DebuggerDisplay("name = {${1:variable name}}")]
endsnippet

snippet new "Construction of an object" b
${1:Type} ${2:variable} = new $1(${3:args});
endsnippet

snippet /^\s*(\w[^=]+)(\*?) (\S+) = new/ "Construction of an object" r
`!p
snip.rv = match[0]
` `!p
txt, is_round_paren = common.guess_type_from_decl(match[1], match[3])
if is_round_paren:
	paren = "("
else:
	paren = "["
snip.rv = txt + paren
`$2`!p
_, is_round_paren = common.guess_type_from_decl(match[1], match[3])
if is_round_paren:
	snip.rv = ")"
else:
	snip.rv = "]"
`;
endsnippet

snippet append "Append an entry to a List" b
${1:${VISUAL:destination}}.Add(${2:entry});
endsnippet

snippet append "Merge a list into another List" b
${1:${VISUAL:destination}}.AddRange(${2:source});
endsnippet

snippet /writeback|swap/ "Assign a struct member by copying and writing back" br
var ${9:`!p
try:
	end = t[1].rindex('.')
	snip.rv = t[1][end + 1:]
except:
	if t[1]:
		snip.rv = t[1][0]
	else:
		snip.rv = 'struct'
`} = ${1:${VISUAL:original}};
$9.$2 = ${4:value}$5;
$1 = $9;
endsnippet

# As you type comma-separated parameters on the right, {n} values appear in the
# format string.
snippet fmt "String format" w
string.Format("${2:`!p
snip.rv = ' '.join(['{' + str(i) + '}' for i in range(t[1].count(','))])
`}"${1:, ${VISUAL:data}})
endsnippet

# As you type comma-separated parameters on the right, val={n} values appear in
# the format string.
snippet dump "String format: dump out data" w
string.Format("${2:`!p
snip.rv = ' '.join([k.strip() +'={' + str(i) + '}' for i,k in enumerate(t[1].split(',')[1:])])
`}"${1:, ${VISUAL:data}})
endsnippet

snippet using "Common usings" b
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System;
endsnippet

# I never remember the order of inputs to GroupBy and the msdn page is
# indecipherable. This seems to be the only practical override to use.
snippet .group "Linq GroupBy" b
.GroupBy(${1:item} => $1.${2:group-key}, $1 => $1.${3:grouped-attribute});
foreach (var $1_group in ${4:linq-result})
{
	// $1_group.Key is the group key.
	foreach (var $1 in $1_group)
	{
		${5:each item in group}
	}
}
endsnippet

# Not sure this is actually useful in practice. We're processing the groups in
# a lambda instead of in a loop.
snippet .groupcomplex "Linq GroupBy lambda lambda" b
.GroupBy(${1:item} => $1.${2:group-key}, $1 => $1, (key, $1s) => new {
	Key = key,
	Data = $1.${3:grouped-attribute}
})
endsnippet

# I never remember the order of inputs to Aggregate and for some reason the
# msdn page has low pagerank.
# $3 is necessary if your result is a different type from your list.
snippet .agg "Linq aggregation" b
.Aggregate(${3:string.Empty, }${1:(sum, next) => string.Concat(sum, ", ", next${2:.name})})
endsnippet

# I don't like postincrement.
snippet for "for loop" b
for (int ${1:i} = 0; $1 < ${2:10}; ++$1)
{
	${VISUAL}$0
}
endsnippet
snippet forr "for loop (reverse)" b
for (int ${1:i} = ${2:10}; $1 >= 0; --$1)
{
	${VISUAL}$0
}
endsnippet

snippet fore "foreach loop" b
foreach (${3:var} ${2:entry} in ${1:items})
{
	${VISUAL}$0
}
endsnippet

snippet for2d "for loop for 2d array" b
for (int ${2:x} = 0; $2 < ${1:array}.GetLength(0); ++$2)
{
	for (int ${3:y} = 0; $3 < $1.GetLength(1); ++$3)
	{
		var cell = $1[x,y];
		${VISUAL}$0
	}
}
endsnippet

snippet if "if statement" "vim.eval('@0')" be
if (${1:`!p
# use context to capture initial register value
snip.rv = snip.context.strip()`})
{
	${VISUAL}$2
}$0
endsnippet

snippet else "else statement" b
else
{
	${VISUAL}$1
}$0
endsnippet

snippet ifdef "ifdef"
#if ${1:SYMBOL}
${2:${VISUAL:#define }}$0
#endif // $1
endsnippet

snippet /sw(itch)?/ "switch statement" brm
switch (${1:pivot})
{`!p
if snip.v.text:
	lines = c.convert_enum_to_switch(snip.v.text)
	for pair in lines:
		snip >> pair[0]
		snip += pair[1]
		snip << pair[0]
else:
	snip += ""
`$0
}
endsnippet

snippet fun "Function" b
${1:public} ${2:void} ${3:Method}(${4})
{
	$0
}
endsnippet

snippet get "Auto property declaration" b
${3:public} ${1:int} ${2:Property} { get; ${4:private }set; }
endsnippet

snippet get "Manual property declaration" b
$1 m_$2;
${3:public }${1:int} ${2:Property}
{
	get {
		${5:return m_$2;}
	}
	${4:private }set {
		m_$2 = value;
	}
}
endsnippet

snippet event "Setup a delegate event" b
public delegate void ${1:Handler}(${3});
public event $1 ${2:_Event};

// Event can only be invoked from this class or via this function.
protected virtual void ${4:RaiseEvent}()
{
	$2?.Invoke($5$3);
}
endsnippet
