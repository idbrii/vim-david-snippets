
clearsnippets fn pfn

snippet fun "fn name(?) -> ? {}" b
${4:pub }fn ${1:function_name}($2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet st "Struct with new constructor"
pub struct ${1:`substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`} {
	${0}
}

impl $1 {
	pub fn new(${2}) -> Self {
		$1 { ${3} }
	}
}
endsnippet

snippet impl "Trait implementation" b
impl ${1:Type/Trait} for ${2:Type} {
	${0}
}
endsnippet

snippet if "if statement" "vim.eval('@0')" be
if ${1:`!p
# use context to capture initial register value
snip.rv = snip.context.strip()`} {
	${VISUAL}$2
}$0
endsnippet

snippet else "else statement" b
else {
	${VISUAL}$1
}$0
endsnippet

# Create structure and then setup for another expansion.
snippet mat "pattern match" "vim.eval('@0')" be
match ${1:`!p
# use context to capture initial register value
snip.rv = snip.context.strip()`} {
	case${2}
}
endsnippet

# Sets up for another expansion.
snippet case "Case clause of pattern match"
${1:_} => ${2:expression},
case${3}
endsnippet

snippet fore "range iteration" b
for ${1:val} in ${4:&mut} ${3:array}.iter() {
	${VISUAL}$0
}
endsnippet

snippet for "index iteration" b
for ${1:val} in ${4:0}${2:u32}..${3:10} {
	${VISUAL}$0
}
endsnippet

snippet wh "while loop"
while ${1:condition} {
	${0:${VISUAL}}
}
endsnippet

snippet loop "loop {}" b
loop {
	${0:${VISUAL}}
}
endsnippet

