# Casts
snippet cast "Static Cast"
static_cast<${1}>(${2})${3}
endsnippet

snippet cast "Reinterpret Cast"
reinterpret_cast<${1}>(${2})${3}
endsnippet

snippet cast "Dynamic Cast"
dynamic_cast<${1}>(${2})${3}
endsnippet

snippet cast "Const Cast"
const_cast<${1}>(${2})${3}
endsnippet

snippet ifhack "Run-time debug option"
static bool hack = false;
if (hack)
{
	${1}
}${2}
endsnippet

# Pragmas for MSVC
snippet opt "Unoptimize region start"
#pragma optimize( "", off )${1}
endsnippet

snippet opt "Unoptimize region end"
#pragma optimize( "", on )${1}
endsnippet

# Read File Into Vector
snippet readfile "readfile"
std::vector<char> v;
if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
	char buf[1024];
	while (size_t len = fread(buf, 1, sizeof(buf), $2))
		v.insert(v.end(), buf, buf + len);
	fclose($2);
}${3}
endsnippet

# std::map
snippet map "map"
std::map<${1:key}, ${2:value}> ${3};
endsnippet

# std::vector
snippet vector "vector"
std::vector<${1:char}> ${2};
endsnippet

# Namespace
snippet ns "ns"
namespace ${1:`!v Filename('', 'my')`} {
	${2}
} /* namespace $1 */
endsnippet

# Class
snippet class "class"
class ${1:`!v Filename('$1', 'name')`} 
{
public:
	$1(${2});
	${3:virtual }~$1();
private:
	${4:/* data */}
};
endsnippet

snippet dtor "dtor"
virtual ~${1:`!v Filename('', 'classname')`}();${2}
endsnippet

snippet for "std::iterator for-each loop"
for (${1:vector<T>}::iterator i = ${2:items.}begin(); i != ${2}end(); ++i) ${3}
endsnippet

# auto iterator
snippet itera "itera"
for (auto ${1:i} = $1.begin(); $1 != $1.end(); ++$1) {
	${2:std::cout << *$1 << std::endl;}
}
endsnippet

# iterator
snippet iter "iter"
for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {
	${6}
}
endsnippet

# member function implementations
snippet mfun "mfun"
${4:void} ${1:`!v Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {
	${5:return};
}
endsnippet

snippet scout "scout"
std::cout << ${1} << std::endl;
endsnippet

snippet cout "cout"
cout << ${1} << endl;
endsnippet

snippet scin "scin"
std::cin >> ${1};
endsnippet

snippet cin "cin"
cin >> ${1};
endsnippet


