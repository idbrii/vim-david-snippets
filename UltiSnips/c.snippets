# quick matching braces
snippet { "{"
{
	${1}
}
endsnippet

# main()
snippet main "main"
int main(${1:int argc, const char *argv[]})
{
	${2}
	return 0;
}
endsnippet

snippet include "include"
#include "${1:`!p snip.rv = snip.basename + '.h'`}"${2}
endsnippet

# #ifndef ... #define ... #endif
snippet defndef "define if not defined"
#ifndef $1
#define ${1:SYMBOL} ${2:value}
#endif${3}
endsnippet

snippet ifdef "ifdef"
#ifdef ${1:SYMBOL}
	${2:#define }
#endif
endsnippet

snippet #if "#if"
#if ${1:FOO}
	${2}
#endif
endsnippet

snippet once "Modern include guard" b
#pragma once
${0}
endsnippet

snippet guard "Preprocessor include header" b
#ifndef ${1:`!p snip.rv = snip.basename.upper() + '_H'`}
#define $1

${0}

#endif /* $1 */
endsnippet

# If Condition
snippet if "if"
if (${1:/* condition */}) {
	${2:/* code */}
}${3}
endsnippet

# Do While Loop
snippet do "do"
do {
	${2:/* code */}
} while (${1:/* condition */});${3}
endsnippet

# While Loop
snippet wh "wh"
while (${1:/* condition */}) {
	${2:/* code */}
}${3}
endsnippet

# For Loop
snippet fo "Indexed for-loop"
for (int ${2:i} = 0; $2 < ${1:count}; ++$2) ${3}
endsnippet

snippet for "Custom for-loop"
for (${1}; ${2}; ${3}) ${4}
endsnippet

# Function
snippet fun "fun"
${1:void} ${2:function_name}(${3})
{
	${4:/* code */}
}${5}
endsnippet

# Function Declaration
snippet fund "fund"
${1:void} ${2:function_name}(${3});${4}
endsnippet

# Typedef
snippet td "td"
typedef ${1:int} ${2:MyCustomType};${3}
endsnippet

# Function pointer
snippet fptr "Function pointer"
${1:return_type} (${2:function_name})(${3: /* arg types */ })${4: = NULL};${5}
endsnippet

# Struct
snippet st "st"
struct ${1:`!p snip.rv = snip.basename + '_t'`} {
	${2:/* data */}
}${3: /* optional variable list */};${4}
endsnippet


