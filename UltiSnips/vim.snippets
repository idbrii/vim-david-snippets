snippet append "Add item to array" b
call add(${1:${VISUAL:list}}, ${2:entry})
endsnippet

snippet bak "Backup an option" b
let $1_bak = &${1:${VISUAL:option}}
let &$1 = ${2:value}
$0
let &$1 = $1_bak
endsnippet

snippet win "Save window layout" b
let winview = winsaveview()
${1:${VISUAL}}$0
call winrestview(winview)
endsnippet

snippet if "if statement" "vim.eval('@0')" be
if ${1:`!p
# use context to capture initial register value
snip.rv = snip.context.strip()`}
	${VISUAL}$2
endif
$0
endsnippet

snippet ifvar "Only if variable exists and is greater than 0"
if exists("g:${1:variable}") && g:$1 > 0${2}
endsnippet

snippet ifnovar "Only if variable doesn't exist or is equal to 0"
if !exists("g:${1:variable}") || g:$1 == 0${2}
endsnippet

snippet ifnomaps "Guard to prevent this plugin's map definitions"
if !exists("g:${1:`!p snip.rv = snip.basename`}_no_mappings") || !g:$1_no_mappings${2}
endsnippet

snippet ifnoexist "Define a variable if undefined"
if !exists("${1:g}:${2:`!p snip.rv = snip.basename`}_${3:var}")
	let $1:$2_$3 = ${4:value}
endif${5}
endsnippet

snippet ifhasmapto "Define a plugin map if not already defined"
if !hasmapto('<Plug>(${1:`!p snip.rv = snip.basename`}-${2:command})')
	${3:n}map ${4:<buffer> }<${5:LocalLeader}>${6:lhs} $1$2
endif${0}
endsnippet

snippet header "Vimscript header"
" File: ${1:`!v expand('%:t')`}
" Author: ${2:`!v g:snips_author`}
" Description: ${3}
endsnippet

snippet ifload "Vimscript plugin load guard"
if exists('${1:loaded_`!p snip.rv = snip.basename`}') || &cp${2: || version < 700}
	finish
endif
let $1 = 1${3}
endsnippet

snippet !fun(ction)?! "New function" br
function! ${1:`!v expand('%:p') =~ 'autoload' ? substitute(matchstr(expand('%:p'),'autoload/\zs.*\ze.vim'),'[/\\]','#','g').'#' : ''`}${2:function_name}(${3})
	${4:" code}
endf${5}
endsnippet

snippet try "try..catch-error..end"
try
	${4:${VISUAL}}
catch ${1:/^Vim\%((\a\+)\)\=:${2:E384}/	" Error: ${3:search hit TOP without match}}
	${5}
endtry
endsnippet

snippet for "for - indexed"
for ${1:i} in range(0, len(${2:list})-1)
	${3:" code}
endfor${4}
endsnippet

snippet fore "for - foreach"
for ${1:needle} in ${2:haystack}
	${3:" code}
endfor${4}
endsnippet

snippet while "while..end"
while ${1:condition}
	${2:" code}
endw${3}
endsnippet

snippet augroup "Define an augroup"
augroup ${1:au_name}
	au!`!p
if t[3] == '<buffer>':
  snip.rv = ' * <buffer>'
else:
  snip.rv = ''
`
	autocmd ${2:BufRead,BufNewFile} ${3:<buffer>} ${4:call ...}$0
augroup END
endsnippet

snippet cmd "Define a command" b
command ${3:-buffer }${4:-nargs=${5:*} }   ${1:Name} ${2:call Action(<f-args>)}
endsnippet

snippet compiler "Create a compiler script" b
" Compiler setup for ${1:file_type}
" For details on creating a compiler file, see ":help write-compiler-plugin".
" Compiler:	$1
" Maintainer:	${2:`!v g:snips_author`}
" Last Change:	`!v strftime("%Y-%m-%d")`

if exists("current_compiler")
	" TODO: uncomment
	"finish
endif
let current_compiler = "$1"

if exists(":CompilerSet") != 2		" older Vim always used :setlocal
	command -nargs=* CompilerSet setlocal <args>
endif

let s:cpo_save = &cpo
set cpo-=C

" TODO: update makeprg to the appropriate build tool/compiler
"CompilerSet makeprg=make\ %

" TODO: update the errorformat
CompilerSet errorformat=$0
			\%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,
			\%Z\ \ \ \ %m

let &cpo = s:cpo_save
unlet s:cpo_save

" TODO: Remove this block. It's for testing with Autosource.
if &ft =~ 'vim'
	cgetfile ~/${2:logfile.log}
	copen
endif

" vim:set sw=2 sts=2:
endsnippet

# vim:set noet sts=4 sw=4 ts=4:
