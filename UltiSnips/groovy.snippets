snippet append "Add item to array" b
${1:${VISUAL:list}}.add(${2:entry})
endsnippet

snippet append "Merge array to array" b
${1:${VISUAL:list}} << ${2:list}
endsnippet

snippet wh "while loop"
while (${1:condition}) {
	${2:${VISUAL}}
}
endsnippet

#~ snippet curfile "Get the path to the script file." b
#~ script_path = Path(__file__)
#~ endsnippet

#~ snippet curdir "Get the path to the directory containing the script file." b
#~ script_path = Path(__file__).parent
#~ endsnippet

snippet fun "function" b
${2:void} ${1:function}($3) {
	${10}
}
endsnippet

# If
snippet /(el)?if/ "if statement" "vim.eval('@0')" bre
`!p
if match.group(1):
	snip.rv = "else if"
else:
	snip.rv = "if"
` (${1:`!p
# use context to capture initial register value
snip.rv = snip.context.strip()`}) {
	${VISUAL}$2
}
endsnippet

snippet /el(se)?/ "else statement" br
else {
	${VISUAL}$2
}
endsnippet

snippet /for(e?)/ "for" r
for (${1:needle} in ${2:haystack}) {
	${3:${VISUAL}}
}
endsnippet

snippet fori "for in range"
for (${1:i} in 0 .. ${2:10}) {
	${3:${VISUAL}}
}
endsnippet

snippet log "Log a message" w
println $1
endsnippet

snippet log "Log a message in Jenkins" w
echo $1
endsnippet

#~ # As you type comma-separated parameters on the right, {n} values appear in the
#~ # format string.
#~ # TODO: Add support for {key} and key=value.
#~ snippet fmt "String format" w
#~ "${2:`!p
#~ snip.rv = ' '.join(['{}' for i,k in enumerate(t[1].split(','))])
#~ 	`}".format(${1:${VISUAL:data}})
#~ endsnippet

#~ # As you type comma-separated parameters on the right, val={n} values appear in
#~ # the format string.
#~ snippet dump "String format: dump out data" w
#~ "${2:`!p
#~ snip.rv = ' '.join([k.strip() +'={}' for i,k in enumerate(t[1].split(','))])
#~ 	`}".format(${1:${VISUAL:data}})
#~ endsnippet

# Limit quote as snippet to specific scenarios (first nonblank or
# following equals) so it's not accidentially expanded within other
# snippets.
snippet " "multi-line string" b
""" ${1:doc}
"""
endsnippet

snippet ' "multi-line string" b
''' ${1:doc}
'''
endsnippet

snippet '=\s*\"' "multi-line string" r
= """ ${1:doc}
"""
endsnippet

