snippet #! "#!"
#! /usr/bin/env python
# -*- coding: utf-8 -*-
endsnippet

snippet imp "import"
import ${1:module}
endsnippet

snippet from "import from"
from ${1:package} import ${2:module}
endsnippet

snippet docs "Module Docstring"
'''
File: ${1:`!v Filename('$1.py', 'foo.py')`}
Author: ${2:`!v g:snips_author`}
Description: ${3}
'''
endsnippet

snippet wh "while"
while ${1:condition}:
	${2:# code...}
endsnippet

snippet dowh "do..while equivalent"
while True:
	${1:# code...}
	if ${2:condition}:
		break
endsnippet

snippet with "with block"
with ${1:expr} as ${2:var}:
	${3:# code...}
endsnippet

snippet cl "class - with docstring"
class ${1:ClassName}(${2:object}):
	"""
	${3:docstring for $1}
	"""
	def __init__(self, ${4:arg}):
		${5:super($1, self).__init__()}
		self.$4 = $4
		${6}
endsnippet

snippet def "function - with docstring"
def ${1:fname}(${2:`!v indent('.') ? 'self' : ''`}):
	"""${3:docstring for $1}"""
	${4:pass}
endsnippet

snippet deff "function - basic"
def ${1:fname}(${2:`!v indent('.') ? 'self' : ''`}):
	${3}
endsnippet

# New Method
snippet defs "defs"
def ${1:mname}(self, ${2:arg}):
	${3:pass}
endsnippet

# New Property
snippet property "property"
def ${1:foo}():
	doc = "${2:The $1 property.}"
	def fget(self):
		${3:return self._$1}
	def fset(self, value):
		${4:self._$1 = value}
endsnippet

# Ifs
snippet if "if"
if ${1:condition}:
	${2:code...}
endsnippet

snippet el "else"
else:
	${1:code...}
endsnippet

snippet ei "elif"
elif ${1:condition}:
	${2:code...}
endsnippet

# For
snippet for "for"
for ${1:needle} in ${2:haystack}:
	${3:code...}
endsnippet

# Encodes
snippet cutf8 "encoding: utf8"
# -*- coding: utf-8 -*-
endsnippet

snippet clatin1 "encoding: latin1"
# -*- coding: latin-1 -*-
endsnippet

snippet cascii "encoding: ascii"
# -*- coding: ascii -*-
endsnippet

snippet ld "lambda"
${1:var} = lambda ${2:vars} : ${3:action}
endsnippet

snippet . "."
self.
endsnippet

snippet su "super"
super(${1:Class}, self).${2:method}(${3})${4}
endsnippet

snippet try "Try/Except"
try:
	${1:pass}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
endsnippet

snippet try "Try/Except/Else"
try:
	${1:pass}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
else:
	${5:pass}
endsnippet

snippet try "Try/Except/Finally"
try:
	${1:pass}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
finally:
	${5:pass}
endsnippet

snippet try "Try/Except/Else/Finally"
try:
	${1:pass}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
else:
	${5:pass}
finally:
	${6:pass}
endsnippet

snippet ifmain "ifmain"
if __name__ == '__main__':
	${1:main()}
endsnippet

# unit tests
snippet unittest "Define unittests when executing module"
if __name__ == '__main__':
	import unittest
	class ${1:ClassName}Test(unittest.TestCase):
		def setUp(self):
			${2:pass}
		def runTest(self):
			${3:pass}
endsnippet

snippet doctest "Run doctests when executing module"
def _test():
	import doctest
	doctest.testmod()
if __name__ == '__main__':
	_test()
endsnippet

snippet _ "__magic__"
__${1:init}__${2}
endsnippet

# Debugging
snippet pdb "python debugger (pdb)"
import pdb; pdb.set_trace()
endsnippet


snippet ipdb "ipython debugger (ipdb)"
import ipdb; ipdb.set_trace()
endsnippet

snippet pdbbb "ipython debugger (pdbpp)"
import pdbpp; pdbpp.set_trace()
endsnippet

snippet pprint "pprint"
import pprint; pprint.pprint(${1})${2}
endsnippet

snippet " "multi-line string"
"""
${1:doc}
"""
endsnippet

snippet test "test function/method"
def test_${1:description}(${2:`!v indent('.') ? 'self' : ''`}):
	${3:pass}
endsnippet

snippet testcase "test case"
class ${1:ExampleCase}(unittest.TestCase):
	def test_${2:description}(self):
		${3:pass}
endsnippet

snippet fut "import from future"
from __future__ import ${1}
endsnippet


